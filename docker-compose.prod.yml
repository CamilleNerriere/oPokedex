services:
  
  pg-opokedex:
    build:
      context: ./
      dockerfile: Dockerfile.pg
    container_name: pg-opokedex
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      start_period: 15s
      interval: 15s
      timeout: 5s
      retries: 5
    networks: 
      - opokedex-network


  back:
      build:
        context: ./back
        dockerfile: Dockerfile.back.prod
      ports:
        - "5050:5050"
      container_name: back-opokedex
      restart: always
      environment:
        NODE_ENV: production
        POSTGRES_URL: ${POSTGRES_URL}
      volumes:
      - ./back:/usr/src/app
      - /usr/src/app/node_modules
      depends_on:
        pg-opokedex:
          condition: service_healthy
      networks: 
        - opokedex-network


  front:
    restart: always
    build:
      context: ./front
      dockerfile: Dockerfile.front.prod
    container_name: front-opokedex
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: ${VITE_API_URL}
      NODE_ENV: production
    volumes:
      - ./front:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - back
    networks: 
      - opokedex-network

  nginx:
    image: nginx:latest
    container_name: nginx-container
    ports:
      - "80:80"
      - "443:443"
    volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
        - ./nginx/conf.d:/etc/nginx/conf.d:ro
        - /etc/letsencrypt:/etc/letsencrypt:ro
        - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - back
      - front
      - pg-opokedex
    restart: 
      always
    networks: 
      - opokedex-network
    
networks:
  opokedex-network:
   driver: bridge

volumes:
  db_data: { }